---
import BaseLayoutBlog from '../../layouts/BaseLayoutBlog.astro';

const title = 'Blog';
const description = 'Latest articles.';
const permalink = `${Astro.site.href}blog`;

let allPosts = await Astro.glob('../../data/blog-posts/*.md');
allPosts = allPosts.sort((a, b) => new Date(b.frontmatter.publishDate).valueOf() - new Date(a.frontmatter.publishDate).valueOf());

let tag_list = []
for (let index = 0; index < allPosts.length; index++) {
  const element = allPosts[index];
  let tags = element.frontmatter.tags
  for (let index = 0; index < tags.length; index++) {
    const tag = tags[index];
    tag_list.push(tag);
  }
}

let allTags = tag_list.filter((item, index) => tag_list.indexOf(item) === index);
console.log(allTags);
---

<BaseLayoutBlog title={title} description={description} permalink={permalink} current="blog">
  
  <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"> -->
  
  <div class="container">

    <h1>Blog</h1>

    <div class="tags-filter">
      
      
      <!-- <p>*Filters go here*</p> -->
      <div class="search-container">
        <label id="searchLabel" for="searchBar"></label>
        <input type="text" id="searchBar" placeholder="Search" aria-labelledby="searchLabel">
        
        
            <div class="filter-select">
  
  
              
              {allTags.sort().map((t) => (
                <>
                <div class="filter-input">
                
                  <div>{t}</div>
                  
  
  
                </div>
                
                
                
                
                </>
              ))}
  
              <button class="resetBtn">Reset</button>
              
         
        
      </div>
    
  </div>
  </div>

  {allPosts.map((post, index) => {
    const href = `/blog/${post.file.split('/').pop().split('.').shift()}`;
    const tags = post.frontmatter.tags;
    const colors = {
      
    }
    return (
    
      <div class="post" data-message={}>
        { index !== 0 && <hr /> }
        <div class="post-item">
          <h2>
            <a href={href}>{post.frontmatter.title}</a>
          </h2>
          <!-- <div class="publishDate">{post.frontmatter.publishDate}</div> -->
          <p>{post.frontmatter.description}</p>
          

          
          <div class="post-item-footer">
            {tags.map((tag) => (
              <>
                <div class="post-tag" data-message={tag}>{tag}</div>
              </>
            ))}
          </div>
        </div>
      </div>

      
    )
  })}

  </div>

  

</BaseLayoutBlog>

<style>
  #logo {
    color: #fff!important;
  }

  .publishDate {
    /* font-size: 0.8em; */
    color: darkgray;
    padding-left: 20px;
    font-weight: bolder;
  }

  h2,
  .post-item-footer {
    font-family: var(--font-family-sans);
    font-weight: 700;
    display: flex;
  }

  h2 {
    
  }

  .post-item-footer div {
    margin-left: 10px;
  }

  .post-item p {
    font-size: 1.2rem;
  }

  .post-tag {
    background-color: var(--primary-color);
    width: fit-content;
    padding: 10px;
    border-radius: 10px;
    font-size: small;
    color: white;
    display: inline;
    font-family: var(--font-family-sans);
}

.tags-filter {
  background-color: var(--filter);
  padding: 20px;
  border-radius: 20px;
  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px 0px;
  /* height: fit-content; */
  /* margin-top: 110px; */
  
}

  

  .post-item-date {
    color: var(--text-secondary);
    text-align: left;
    text-transform: uppercase;
    margin-right: 16px;
  }

  hr {
    margin: 60px auto;
  }

  .container {
    max-width: 30rem;
    padding: 20px;
    display: grid!important;
  }

  input {
    transition: 0.5s;
    padding: 8px;
    width: 100%;
    border-radius: 10px;
    font-size: 1rem;
    /* border: none; */
    border: 1pt solid white;
  }

  .filter-text {
    font-size: 14pt;
    font-weight: bold;
  }

  
  #searchBar {
    color: var(--primary-color)!important;
    }
  

  .search-container {
    /* display: inline-flex; */
  }

  form button {
    border-radius: 50px;
    /* border: none; */
    background-color: white;
    border-color: var(--primary-color);
    padding: 10px;
    padding: 15px;
  }

  .tags-filter h2 {
    padding-bottom: 10px;
  }

  .tags-filter {
    display: table;
  }
  
  h1 {
    margin: 0;
  }

  .filter-check {
    display: none;
    
  }

  .filter-select {
    padding: 5px;
    
    
    color: white;
  }

  .tag-dropdown:hover {
    cursor: pointer;
  }

  .filter-input:hover {
    cursor: pointer;
  }

  .tag-dropdown {
    text-align: center;
    padding: 5px;
    
    border-radius: 2px;
    margin-top: 15px;
    padding: 10px;
    background-color: var(--primary-color);
    color: white;
  }

  .filter-input {
    padding-bottom: 5px;
    background: var(--primary-color);
    border-radius: 10px;
    text-align: center;
    font-family: var(--font-family-sans);
    font-weight: bold;
    padding: 5px;
    margin-top: 10px;
  }

  .hidden {
    display: none!important;
  }
  
  label:hover {
    cursor: pointer;
  }

  .resetBtn {
    padding: 10px;
    background-color: #6e6e6e;
    color: #efefef;
    font-weight: bold;
    border-radius: 10px;
    border: none;
    margin-top: 50px;
    font-size: 1rem;
    font-family: var(--font-family-sans);

  }

  .resetBtn:hover {
    cursor: pointer;
  }
  
  
</style>

<script>
  let filterInput = document.querySelectorAll(".filter-input");
  console.log(filterInput);

  let posts = document.querySelectorAll(".post");
  // console.log(posts);

  filterInput.forEach(element => {
  
    let clickedTag = element.children[0].innerHTML;
    console.log("Clicked Tag: ",clickedTag);

    element.addEventListener('click', event => {
      
      posts.forEach(p => {
        let text = p.innerHTML;
        console.log(text.includes(clickedTag));
        if (!text.includes(clickedTag)) {
          
          p.classList.add('hidden');
          // p.style.display = "block";
        }
        else {
          p.classList.remove("hidden");
          // p.style.display = "none";
        }

      });
    });

});

let searchBar = document.getElementById("searchBar");

searchBar.addEventListener("input", () => {
  const searchValue = searchBar.value.toLowerCase();

  posts.forEach((post) => {
    const postText = post.textContent.toLowerCase();
    console.log(postText);

    if (postText.indexOf(searchValue) !== -1) {
      post.style.display = "block";
      // post.classList.add("hidden");
    } else {
      post.style.display = "none";
      // post.classList.remove("hidden");
    }
  });
});

let resetBtn = document.querySelector(".resetBtn");
console.log(resetBtn);

resetBtn.addEventListener('click', event => {    
  posts.forEach((post) => {
    post.classList.remove("hidden");
  })
});


</script>


